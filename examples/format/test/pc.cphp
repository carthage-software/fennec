<?php

$this->state->subscribe(static function (null|Throwable $error, mixed $value) use ($state, $always): void {
    try {
        if ($error) {
            $state->error($error);
        } else {
            /**
             * @var mixed $value
             */
            $state->complete($value);
        }
    } catch (Throwable $throwable) {
        $state->error($throwable);
    }
});

function sort_by(iterable $iterable, Closure $scalar_func, null|Closure $comparator = null): array
{
    $comparator ??=
        /**
         * @param Ts $a
         * @param Ts $b
         */
        static fn ($a, $b): int => $a <=> $b;
}

// if ($bin > 25) $diff += 0x61 - 0x41 - 26; // 6
$diff += ((25 - $bin) >> 8) & 6;
// if ($bin > 51) $diff += 0x30 - 0x61 - 26; // -75
$diff -= ((51 - $bin) >> 8) & 75;
// if ($bin > 61) $diff += 0x2b - 0x30 - 10; // -15
$diff -= ((61 - $bin) >> 8) & 15;
// if ($bin > 62) $diff += 0x2f - 0x2b - 1; // 3
$diff += ((62 - $bin) >> 8) & 3;

$writable = str_contains($meta['mode'], 'x')
    || str_contains($meta['mode'], 'w')
    || str_contains($meta['mode'], 'c')
    || str_contains($meta['mode'], 'a')
    || str_contains($meta['mode'], '+');

interface CloseReadStreamHandleInterface extends
    CloseStreamHandleInterface,
    IO\CloseReadHandleInterface,
    ReadStreamHandleInterface
{
}

trait TemporalConvenienceMethodsTrait {
   public function toString(
        ?DateStyle $date_style = null,
        ?TimeStyle $time_style = null,
        ?Timezone $timezone = null,
        ?Locale $locale = null,
    ): string {
        $timestamp = $this->getTimestamp();

        /**
         * @psalm-suppress InvalidOperand
         * @psalm-suppress ImpureMethodCall
         */
        return Internal\create_intl_date_formatter($date_style, $time_style, null, $timezone, $locale)
            ->format($timestamp->getSeconds() + ($timestamp->getNanoseconds() / NANOSECONDS_PER_SECOND));
    }
}

$err |= ($char0 | $char1 | $char2) >> 8;
