<?php

// Simple if statement with braces
if ($foo) {
    echo "This is a simple if statement with braces.";
}

// Simple if statement without braces
if ($bar) {
    echo "This is a single-statement if without braces.";
}

// If-else with braces
if ($baz) {
    echo "Baz is true.";
} else {
    echo "Baz is false.";
}

// If-else without braces
if ($qux) {
    echo "Qux is true.";
} else {
    echo "Qux is false.";
}

// If-elseif-else with braces
if ($x > 10) {
    echo "x is greater than 10.";
} elseif ($x > 5) {
    echo "x is greater than 5 but less than or equal to 10.";
} else {
    echo "x is 5 or less.";
}

// If-else if with braces (note: 'else if' is valid but less common)
if ($y > 10) {
    echo "y is greater than 10.";
} elseif ($y > 5) {
    echo "y is greater than 5 but less than or equal to 10.";
} else {
    echo "y is 5 or less.";
}

// If statement using colon-delimited syntax
if ($foo):
    echo "Colon-delimited syntax if.";
endif;

// If-else using colon-delimited syntax
if ($bar):
    echo "Bar is true.";
else:
    echo "Bar is false.";
endif;

// If-elseif-else using colon-delimited syntax
if ($baz > 10):
    echo "Baz is greater than 10.";
elseif ($baz > 5):
    echo "Baz is greater than 5 but less than or equal to 10.";
else:
    echo "Baz is 5 or less.";
endif;

// Nested if statements with comments
if ($nested) {
    // Outer if
    if ($nestedAgain) {
        echo "This is a nested if statement.";
    }
}

// Nested if statements without comments
if ($outer) {
    if ($inner) {
        echo "Nested without comments.";
    }
}

// Single-line nested if statements
if ($outer) {
    if ($inner) {
        echo "Single-line nested ifs.";
    }
}

// Complex if with logical operators
if ($a && $b || !$c) {
    echo "Complex if with logical operators.";
} elseif ($d || $e && $f) {
    echo "Complex elseif.";
} else {
    echo "Complex else.";
}

// Multi-line condition in if
if ($a && $b && $c) {
    echo "Multi-line condition.";
}

// Multiple single-line if statements
if ($a) {
    echo "a is true.";
}

if ($b) {
    echo "b is true.";
}

if ($c) {
    echo "c is true.";
}

// Dangling else ambiguity resolution
if ($condition1) {
    if ($condition2) {
        echo "Condition1 and Condition2 are true.";
    } else {
        echo "Condition1 is true but Condition2 is false.";
    }
}

// Ternary operator for comparison
$result = $foo ? "Foo is true" : "Foo is false.";

// Mix of all styles
if ($style1) {
    echo "Style1";
} else {
    echo "Style2";
}

if ($style2) {
    echo "Style2";
} elseif ($style3) {
    echo "Style3";
} else {
    echo "Default style.";
}

if ($style3):
    echo "Style3 with colon syntax.";
endif;

// Simple for loop with braces
for ($i = 0; $i < 10; $i++) {
    echo "This is iteration $i in a for loop with braces.\n";
}

// Simple for loop without braces
for ($i = 0; $i < 5; $i++) {
    echo "This is iteration $i in a for loop without braces.\n";
}

// For loop using colon-delimited syntax
for ($i = 0; $i < 3; $i++):
    echo "This is iteration $i in a for loop with colon syntax.\n";
endfor;

// While loop with braces
$counter = 0;
while ($counter < 3) {
    echo "Counter is $counter in a while loop with braces.\n";
    $counter++;
}

// While loop without braces
$counter = 0;
while ($counter < 2) {
    echo "Counter is $counter++ in a while loop without braces.\n";
}

// While loop using colon-delimited syntax
$counter = 0;
while ($counter < 2):
    echo "Counter is $counter in a while loop with colon syntax.\n";
    $counter++;
endwhile;

// Do-while loop with braces
$counter = 0;
do {
    echo "Counter is $counter in a do-while loop with braces.\n";
    $counter++;
} while ($counter < 2);

// Do-while loop without braces
$counter = 0;
do {
    echo "Counter is $counter++ in a do-while loop without braces.\n";
} while ($counter < 2);

// Foreach loop with braces
$array = [1, 2, 3];
foreach ($array as $value) {
    echo "Value is $value in a foreach loop with braces.\n";
}

// Foreach loop without braces
foreach ($array as $value) {
    echo "Value is $value in a foreach loop without braces.\n";
}

// Foreach loop with key-value and braces
$assocArray = ["a" => 1, "b" => 2];
foreach ($assocArray as $key => $value) {
    echo "Key is $key and Value is $value in a foreach loop with braces.\n";
}

// Foreach loop with key-value without braces
foreach ($assocArray as $key => $value) {
    echo "Key is $key and Value is $value in a foreach loop without braces.\n";
}

// Foreach loop using colon-delimited syntax
foreach ($array as $value):
    echo "Value is $value in a foreach loop with colon syntax.\n";
endforeach;

// Complex nested loops
for ($i = 0; $i < 2; $i++) {
    foreach ($array as $value) {
        echo "Nested loop: i=$i, value=$value.\n";
    }
}

// Infinite loop with break
$infiniteCounter = 0;
while (true) {
    echo "This is an infinite loop iteration $infiniteCounter.\n";
    $infiniteCounter++;
    if ($infiniteCounter >= 3) {
        break;
    }
}

// Multi-condition while loop
$x = 0;
$y = 5;
while ($x < 3 && $y > 0) {
    echo "x=$x, y=$y in a multi-condition while loop.\n";
    $x++;
    $y--;
}

// Ternary inside a loop
for ($i = 0; $i < 3; $i++) {
    echo (($i % 2) === 0) ? "$i is even.\n" : "$i is odd.\n";
}

// Skipping iterations with continue
for ($i = 0; $i < 5; $i++) {
    if (($i % 2) === 0) {
        continue; // Skip even numbers
    }
    echo "This is iteration $i, an odd number.\n";
}

// Empty loop body
for ($i = 0; $i < 3; $i++);

// Loop with only a semicolon as body
$counter = 0;
while ($counter++ < 3);

// Basic switch with braces and default case
$switchVar = 2;
switch ($switchVar) {
    case 1:
        echo "Case 1.\n";
        break;
    case 2:
        echo "Case 2.\n";
        break;
    default:
        echo "Default case.\n";
}

// Switch with colon-delimited syntax and default case
$switchVar = 3;
switch ($switchVar):
    case 1:
        echo "Case 1.\n";
        break;
    case 2:
        echo "Case 2.\n";
        break;
    default:
        echo "Default case.\n";
endswitch;

// Switch with fallthrough
$switchVar = 1;
switch ($switchVar) {
    case 1:
        echo "Case 1.\n";
    case 2:
        echo "Case 2 or fallthrough from Case 1.\n";
        break;
    default:
        echo "Default case.\n";
}

// Switch with no default case
$switchVar = 4;
switch ($switchVar) {
    case 1:
        echo "Case 1.\n";
        break;
    case 2:
        echo "Case 2.\n";
        break;
}

// Switch with no cases
$switchVar = 5;
switch ($switchVar) {
    // No cases, no output
}

// Nested switch statements
$switchVar = "nested";
switch ($switchVar) {
    case "outer":
        echo "Outer switch case.\n";
        break;
    case "nested":
        switch (true) {
            case $switchVar === "nested":
                echo "Nested switch case.\n";
                break;
        }
        break;
}

// Complex switch with conditions
$switchVar = 10;
switch (true) {
    case $switchVar < 5:
        echo "Less than 5.\n";
        break;
    case $switchVar < 10:
        echo "Less than 10 but not less than 5.\n";
        break;
    case $switchVar === 10:
        echo "Equal to 10.\n";
        break;
}

// Match expression with default
$matchVar = 2;
$result = match ($matchVar) {
    1 => "Matched case 1.",
    2 => "Matched case 2.",
    default => "Matched default case.",
};
echo $result . "\n";

// Match expression without default
$matchVar = 1;
$result = match ($matchVar) {
    1 => "Matched case 1.",
    2 => "Matched case 2.",
};
echo $result . "\n";

// Match expression with multiple conditions for one case
$matchVar = "b";
$result = match ($matchVar) {
    "a", "b", "c" => "Matched a, b, or c.",
    "d" => "Matched d.",
    default => "Matched default.",
};
echo $result . "\n";

// Match expression with complex cases
$matchVar = 15;
$result = match (true) {
    $matchVar < 10 => "Less than 10.",
    $matchVar < 20 => "Less than 20 but not less than 10.",
    default => "20 or greater.",
};
echo $result . "\n";

// Match expression with no cases
$result = match ($matchVar) {
    // No cases
};
echo $result;

// Match expression with variables
$a = 3;
$b = 5;
$matchVar = 15;
$result = match (true) {
    ($a + $b) === $matchVar => "a + b equals matchVar.",
    $a > $b => "a is greater than b.",
    default => "Default case.",
};
echo $result . "\n";

// Match expression returning a function result
$matchVar = 42;
$result = match ($matchVar) {
    42 => strtoupper("Answer to everything"),
    default => strtolower("unknown"),
};
echo $result . "\n";

// Match expression in a function
function testMatch($var)
{
    return match ($var) {
        "php" => "Matched PHP.",
        "rust" => "Matched Rust.",
        default => "Matched default.",
    };
}

echo testMatch("rust") . "\n";

if ($foo) {
    $a = match ($i) {
        0 => "Zero",
        1 => "One",
        2 => "Two",
        default => "Other",
    };
}

if ($a > 0) {
    foreach ($array as $key => $value) {
        switch ($key) {
            case 1:
                while ($value < 10) {
                    if (($value % 2) === 0) {
                        for ($i = 0; $i < $value; $i++) {
                            echo match ($i) {
                                0 => "Zero",
                                1 => "One",
                                2 => "Two",
                                default => "Other",
                            };
                            if ($i > 5) {
                                switch ($i % 3) {
                                    case 0:
                                        do {
                                            $j = $i * $value;
                                            echo "Value of j: $j\n";
                                        } while ($j < 100);
                                        break;
                                    case 1:
                                        echo "Case 1 reached\n";
                                        break;
                                    default:
                                        foreach (range(0, 3) as $innerKey => $innerValue) {
                                            if ($innerValue > 1) {
                                                echo "Inner value: $innerValue\n";
                                            } elseif ($innerValue === 0) {
                                                echo match ($innerKey) {
                                                    0 => "Start",
                                                    default => "Not start",
                                                };
                                            } else {
                                                break 2;
                                            }
                                        }
                                }
                            }
                        }
                    } elseif (($value % 3) === 0) {
                        echo "Value divisible by 3: $value\n";
                    } else {
                        switch (true) {
                            case $value < 5:
                                echo "Small value: $value\n";
                                break;
                            case $value > 20:
                                break 3;
                            default:
                                echo "Default case hit\n";
                        }
                    }
                    $value++;
                }
                break;
            case 2:
                echo "Special case for key 2\n";
                break;
            default:
                if (($value % 5) === 0) {
                    while ($value--) {
                        if ($value === 2) {
                            continue 2;
                        }
                        echo "Counting down: $value\n";
                    }
                } else {
                    echo "Key not handled: $key\n";
                }
        }
    }
} else {
    echo "Outer condition not met\n";
}

foreach ($this->registry->getManagers() as $name => $em) {
    try {
        return $this->cache[$class] = [$em->getClassMetadata($class), $name];
    } catch (MappingException) {
        // not an entity or mapped super class
    } catch (LegacyMappingException) {
        // not an entity or mapped super class, using Doctrine ORM 2.2
    }
}

foo(1, [
    "user" => "John",
    "email" => "john@example.com",
    "age" => 30,
]);

$loader = new DoctrineChoiceLoader(
    $this->om,
    $this->class,
    $this->idReader,
    $this->objectLoader,
);

test(
    $b = 12 instanceof Foo,
);

foo(function (string $bar, string $baz, string $qux): void {
    echo "Hello";
});

class A
{
    #[A\B]
    string $bar;

    public function foo(
        #[A\B]
        #[A\B]
        #[A\B]
        string $bar,
    ) {
    }
}
